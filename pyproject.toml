[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "solana-agent-studio"
version = "1.0.0"
description = "Production-ready AI Agent Studio for Solana DeFi operations"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Solana Agent Studio Team", email = "team@solana-agent-studio.com"}
]
keywords = ["solana", "defi", "ai", "agents", "trading", "blockchain"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.10"
dependencies = [
    # Core framework
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "typer>=0.9.0",
    "rich>=13.7.0",
    "click>=8.1.0",
    
    # Async and networking
    "aiohttp>=3.9.0",
    "aiofiles>=23.2.0",
    "httpx>=0.25.0",
    "websockets>=12.0",
    "uvloop>=0.19.0; sys_platform != 'win32'",
    
    # Solana blockchain
    "solders>=0.20.0",
    "solana>=0.32.0",
    "anchorpy>=0.19.0",
    "construct>=2.10.0",
    
    # Market data and APIs
    "ccxt>=4.1.0",
    "pycoingecko>=3.1.0",
    "python-binance>=1.0.0",
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    
    # LLM providers
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    "together>=0.2.0",
    
    # Database and caching
    "asyncpg>=0.29.0",
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    
    # Configuration and environment
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "toml>=0.10.0",
    "dynaconf>=3.2.0",
    
    # Monitoring and logging
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "sentry-sdk>=1.38.0",
    
    # Security and cryptography
    "cryptography>=41.0.0",
    "pynacl>=1.5.0",
    "keyring>=24.3.0",
    
    # Data processing
    "orjson>=3.9.0",
    "msgpack>=1.0.0",
    "lz4>=4.3.0",
    
    # Utilities
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    "cachetools>=5.3.0",
    "tenacity>=8.2.0",
    "backoff>=2.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
]

prod = [
    "gunicorn>=21.2.0",
    "uvicorn[standard]>=0.24.0",
    "fastapi>=0.104.0",
    "prometheus-fastapi-instrumentator>=6.1.0",
]

monitoring = [
    "grafana-api>=1.0.3",
    "elasticsearch>=8.11.0",
    "boto3>=1.34.0",  # AWS services
]

jupyter = [
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "ipywidgets>=8.1.0",
    "plotly>=5.17.0",
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
]

[project.urls]
Homepage = "https://github.com/solana-agent-studio/solana-agent-studio"
Documentation = "https://docs.solana-agent-studio.com"
Repository = "https://github.com/solana-agent-studio/solana-agent-studio.git"
Changelog = "https://github.com/solana-agent-studio/solana-agent-studio/blob/main/CHANGELOG.md"
"Bug Tracker" = "https://github.com/solana-agent-studio/solana-agent-studio/issues"

[project.scripts]
solana-studio = "solana_swarm.cli.main:cli"
solana-agent = "solana_swarm.cli.main:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["solana_swarm*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.toml", "*.md"]

# Black formatting
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["solana_swarm"]
known_third_party = ["solana", "solders", "anchorpy", "aiohttp", "pydantic", "typer"]

# mypy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "solana.*",
    "solders.*",
    "anchorpy.*",
    "ccxt.*",
    "pycoingecko.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "live: marks tests that require live market data",
    "mainnet: marks tests that require mainnet access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["solana_swarm"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"